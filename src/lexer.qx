token
{
    TERMINATION;
    FAIL;

    HASH_U8_LP;
    HASH_LP;
    HASH_SEMICOLON;
    LP;
    RP;
    DOT;
    ELLIPSIS;
    COMMA_AT;
    COMMA;
    QUOTE;
    BACKTICK;
    IDENTIFIER;
    TRUE;
    FALSE;
    STRING;
    CHARACTER;
    NUMBER;
}

define
{
    /* Skipper and delimiter */
    whitespace                  [ \n\t]
    comment                     ;.*
    atomsphere                  {whitespace}|{comment}
    intertoken_space            {atomsphere}+
    delimiter                   {whitespace}|[()";]

    /* Identifier (symbol) */
    letter                      [a-z]
    special_initial             [!$%&*/:<=>?^_~]
    digit                       [0-9]
    initial                     {letter}
                                |{special_initial}
    digit                       [0-9]
    special_subsequent          [+\-.@]
    subsequent                  {initial}|{digit}|{special_subsequent}
    peculiar_identifier         "+"|"-"|"..."
    identifier                  {initial}{subsequent}*|{peculiar_identifier}

    /* Character */
    character_name              "space"|"newline"
    character                   #\\{character_name}|#\\.

    /* Boolean */
    true                        #t
    false                       #f

    /* Number */
    exactness                   #[ei]
    sign                        [+\-]

    bin_radix                   #b
    bin_prefix                  {exactness}{bin_radix}
                                |{bin_radix}{exactness}?
    bin_digit                   0|1
    bin_uinteger                {bin_digit}+
    bin_ureal                   {bin_uinteger}("/"{bin_uinteger})?
    bin_real                    {sign}?{bin_ureal}
    bin_complex                 {bin_real}@{bin_real}
                                |{bin_real}?{sign}{bin_ureal}?[iI]
                                |{bin_real}
    bin_number                  {bin_prefix}{bin_complex}

    oct_radix                   #o
    oct_prefix                  {exactness}{oct_radix}
                                |{oct_radix}{exactness}?
    oct_digit                   [0-7]
    oct_uinteger                {oct_digit}+
    oct_ureal                   {oct_uinteger}("/"{oct_uinteger})?
    oct_real                    {sign}?{oct_ureal}
    oct_complex                 {oct_real}@{oct_real}
                                |{oct_real}?{sign}{oct_ureal}?[iI]
                                |{oct_real}
    oct_number                  {oct_prefix}{oct_complex}

    dec_radix                   #d
    dec_prefix                  {exactness}{dec_radix}?
                                |{dec_radix}{exactness}?
    dec_digit                   [0-9]
    dec_uinteger                {dec_digit}+
    exponent_marker             [esfdl]
    suffix                      {exponent_marker}{sign}?{dec_digit}+
    decimal                     ("."{dec_digit}+
                                 |{dec_digit}+"."{dec_digit}*
                                 |{dec_digit}+"."
                                 |{dec_uinteger}
                                ){suffix}?
    dec_ureal                   {dec_uinteger}("/"{dec_uinteger})?|{decimal}
    dec_real                    {sign}?{dec_ureal}
    dec_complex                 {dec_real}@{dec_real}
                                |{dec_real}?{sign}{dec_ureal}?[iI]
                                |{dec_real}
    dec_number                  {dec_prefix}?{dec_complex}

    hex_radix                   #x
    hex_prefix                  {exactness}{hex_radix}
                                |{hex_radix}{exactness}?
    hex_digit                   [0-9a-f]
    hex_uinteger                {hex_digit}+
    hex_ureal                   {hex_uinteger}("/"{hex_uinteger})?
    hex_real                    {sign}?{hex_ureal}
    hex_complex                 {hex_real}@{hex_real}
                                |{hex_real}?{sign}{hex_ureal}?[iI]
                                |{hex_real}
    hex_number                  {hex_prefix}{hex_complex}

    number                      {bin_number}
                                |{oct_number}
                                |{dec_number}
                                |{hex_number}
}

start = MAIN;

mode FAILURE : <inheritable: only>
{
    <<FAIL>> => TKN_FAIL (Lexeme);
}

mode EOF : <inheritable: only>
{
    <<EOF>> => TKN_TERMINATION (Lexeme);
}

mode MAIN : FAILURE, EOF
{
    /* Skippers */
    {intertoken_space}          {}

    /* Punctuations */
    "#;"                        => TKN_HASH_SEMICOLON (Lexeme);
    "#u8("                      => TKN_HASH_U8_LP (Lexeme);
    "#("                        => TKN_HASH_LP (Lexeme);
    "("                         => TKN_LP (Lexeme);
    ")"                         => TKN_RP (Lexeme);
    "."                         => TKN_DOT (Lexeme);
    "..."                       => TKN_ELLIPSIS (Lexeme);

    /* Abbreviations */
    ,@                          => TKN_COMMA_AT (Lexeme);
    ,                           => TKN_COMMA (Lexeme);
    "'"                         => TKN_QUOTE (Lexeme);
    `                           => TKN_BACKTICK (Lexeme);

    /* Symbols */
    {identifier}/{delimiter}    => TKN_IDENTIFIER (Lexeme);

    /* Characters */
    #\\null/{delimiter}         => TKN_CHARACTER (Lexeme + 2, LexemeEnd);
    #\\alarm/{delimiter}        => TKN_CHARACTER (Lexeme + 2, LexemeEnd);
    #\\backspace/{delimiter}    => TKN_CHARACTER (Lexeme + 2, LexemeEnd);
    #\\tab/{delimiter}          => TKN_CHARACTER (Lexeme + 2, LexemeEnd);
    #\\newline/{delimiter}      => TKN_CHARACTER (Lexeme + 2, LexemeEnd);
    #\\return/{delimiter}       => TKN_CHARACTER (Lexeme + 2, LexemeEnd);
    #\\space/{delimiter}        => TKN_CHARACTER (Lexeme + 2, LexemeEnd);
    #\\escape/{delimiter}       => TKN_CHARACTER (Lexeme + 2, LexemeEnd);
    #\\delete/{delimiter}       => TKN_CHARACTER (Lexeme + 2, LexemeEnd);
    #\\./{delimiter}            => TKN_CHARACTER (Lexeme + 2, LexemeEnd);

    /* Booleans */
    {true}/{delimiter}          => TKN_TRUE (Lexeme);
    {false}/{delimiter}         => TKN_FALSE (Lexeme);

    /* Strings */
    "\""                        => GOSUB (STRING);

    /* Number */
    {number}/{delimiter}        => TKN_NUMBER (Lexeme);
}

mode STRING : EOF, FAILURE
{
    on_entry                    { self_accumulator_clear (); }
    on_exit                     { self_accumulator_flush (TKN_STRING); }

    \\a                         { self_accumulator_add_character ('\a'); }
    \\t                         { self_accumulator_add_character ('\t'); }
    \\n                         { self_accumulator_add_character ('\n'); }
    \\r                         { self_accumulator_add_character ('\r'); }
    \\\"                        { self_accumulator_add_character ('\"'); }
    \\\\                        { self_accumulator_add_character ('\\'); }
    \n                          { self_accumulator_add_character ('\n'); }

    \"                          => GOUP ();

    .                           { self_accumulator_add (Lexeme, LexemeEnd); }
}
