token {
    TERMINATION;

    POUND_LP;
    LP;
    RP;
    DOT;
    ELLIPSIS;
    COMMA_AT;
    COMMA;
    SINGLE_QUOTE;
    BACK_QUOTE;
    IDENTIFIER;
    BOOLEAN;
    STRING;

    FAIL;
}

define {
    /* Skipper and delimiter */
    whitespace          [ \n]
    comment             ;.*
    atomsphere          {whitespace}|{comment}
    intertoken_space    {atomsphere}+
    delimiter           {whitespace}|[()";]

    /* Identifier (symbol) */
    letter              [a-zA-Z]
    special_initial     [!$%&*/:<=>?^_~]
    initial             {letter}|{special_initial}
    digit               [0-9]
    special_subsequent  [\-+.@]
    subsequent          {initial}|{digit}|{special_subsequent}
    peculiar_identifier [\-+]|"..."
    identifier          {initial}{subsequent}*|{peculiar_identifier}

    /* Boolean */
    boolean             #[tf]
}

start = MAIN;

mode FAILURE : <inheritable: only> {
    <<FAIL>> => TKN_FAIL(Lexeme);
}

mode EOF : <inheritable: only> {
    <<EOF>> => TKN_TERMINATION(LexemeNull);
}

mode MAIN : FAILURE, EOF {
    /* Skippers */
    {intertoken_space}          {}

    /* Punctuations */
    "#("                        => TKN_POUND_LP(Lexeme);
    "("                         => TKN_LP(Lexeme);
    ")"                         => TKN_RP(Lexeme);
    "."                         => TKN_DOT(Lexeme);
    "..."                       => TKN_ELLIPSIS(Lexeme);

    /* Abbreviations */
    ,@                          => TKN_COMMA_AT(Lexeme);
    ,                           => TKN_COMMA(Lexeme);
    "'"                         => TKN_SINGLE_QUOTE(Lexeme);
    `                           => TKN_BACK_QUOTE(Lexeme);

    /* Symbols */
    {identifier}/{delimiter}    => TKN_IDENTIFIER(Lexeme);

    /* Booleans */
    {boolean}/{delimiter}       => TKN_BOOLEAN(Lexeme);

    /* Strings */
    "\""                        => GOSUB(STRING);
}

mode STRING : EOF, FAILURE {
    on_entry {
        self_accumulator_clear();
    }

    on_exit {
        self_accumulator_flush(TKN_STRING);
    }

    /* Escaped characters */
    \\   { self_accumulator_add_character('\\'); }
    \\a  { self_accumulator_add_character('\a'); }
    \\t  { self_accumulator_add_character('\t'); }
    \\n  { self_accumulator_add_character('\n'); }
    \\r  { self_accumulator_add_character('\r'); }
    \\\" { self_accumulator_add_character('\"'); }
    \\\\ { self_accumulator_add_character('\\'); }

    /* Ending double quote, back to MAIN mode */
    \" => GOUP();

    . { self_accumulator_add(Lexeme, LexemeEnd); }
}
