// -*- C++ -*-
start = PROGRAM;

header {
#include <stdlib.h> 

    typedef struct {
        uint16_t   begin[INDENTATION_STACK_SIZE];
        uint16_t*  end;
        uint16_t*  memory_end;
    } IndentationStack;

    void      IndentationStack_push(IndentationStack* me, uint16_t Indentation);
    uint16_t  IndentationStack_pop(IndentationStack* me);

#   define IndentationStack_back() *(self.indentation_stack.end - 1)
}

define {
    /* -*- C -*-
     * Pattern definitions for example application */
    P_WHITESPACE          [ \t\n]
    P_CURLY_BRACKET_O     "{"
    P_CURLY_BRACKET_C     "}"
    P_BRACKET_O           "("
    P_BRACKET_C           ")"
    P_EQUAL               "=="
    P_KEY_STRUCT          "struct"
    P_KEY_IF              "if"
    P_KEY_IN              "in"
    P_KEY_ELSE            "else:"
    P_KEY_AND             "and"
    P_KEY_OR              "or"
    P_KEY_FOR             "for"
    P_KEY_DEF             "def"
    P_COLON               ":"
    P_IDENTIFIER          [a-zA-Z]+
    P_PRINT               "print"
    P_NUMBER              [0-9]+
    //
    P_STRING_DELIMITER               "\""
    P_BACKSLASHED_STRING_DELIMITER   "\\\""
    P_BACKSLASHED_BACKSLASH          "\\\\"
    P_BACKSLASHED_NEWLINE            "\\\n"
}

token {
    BRACKET_O;
    BRACKET_C;
    BLOCK_OPEN;
    BLOCK_CLOSE;
    CURLY_BRACKET_O;
    CURLY_BRACKET_C;
    OP_EQUAL;
    IF;
    ELSE;
    AND;
    OR;
    COLON;
    FOR;
    IN;
    PRINT;
    FUNCTION_DEF;
    INDENTATION;
    STRUCT;
    SEMICOLON;
    IDENTIFIER;
    NUMBER;
    STRING;
    ERROR_MISALIGNED_INDENTATION;
    EVENT_MODE_CHANGE;
}

body {
    IndentationStack  indentation_stack;
    bool              allow_opening_indentation_f;
}

init {
    /* first indentation at column = 0 */
    self.indentation_stack.begin[0] = (uint16_t)0;
    self.indentation_stack.end      = self.indentation_stack.begin + 1;
    /* default: do not allow to open a sub-block.
     * only function definitions, if statements, and for loops
     * should allow to open a new indentation block in the next line. */
    self.allow_opening_indentation_f = false;
}


mode END_OF_FILE :
<inheritable: only>  
{    
    <<EOF>> => QUEX_TKN_TERMINATION;
}


mode PROGRAM :
     END_OF_FILE
<entry: STRING_READER>
<exit:  STRING_READER>
{
    on_indentation {

        if( Indentation > IndentationStack_back() ) {
            if( self.allow_opening_indentation_f ) {
                self_send(QUEX_TKN_BLOCK_OPEN);
                IndentationStack_push(&self.indentation_stack, (uint16_t)Indentation);
                self.allow_opening_indentation_f = false;
            }
            else {
                /* -- higher indentation where it was not allowed to indent higher
                 *    => misaligned indentation                                    */
                self_token_p()->number = (int)self_line_number(); 
                self_send(QUEX_TKN_ERROR_MISALIGNED_INDENTATION);
            }
            return;
        }
        while( IndentationStack_back() > Indentation ) {
            self_send(QUEX_TKN_BLOCK_CLOSE);     
            IndentationStack_pop(&self.indentation_stack);
        }

        /* -- 'landing' indentation has to fit an indentation border
         *    if not send an error.                                  */
        if( IndentationStack_back() != Indentation ) {
            self_token_p()->number = (int)self_line_number(); 
            self_send(QUEX_TKN_ERROR_MISALIGNED_INDENTATION);
        }
    }

    {P_BACKSLASHED_NEWLINE} {
        self_disable_next_indentation_event();
    }
    
    {P_WHITESPACE} {
    }

    {P_CURLY_BRACKET_O} => QUEX_TKN_CURLY_BRACKET_O; 
    {P_CURLY_BRACKET_C} => QUEX_TKN_CURLY_BRACKET_C; 
    {P_BRACKET_O}       => QUEX_TKN_BRACKET_O;
    {P_BRACKET_C}       => QUEX_TKN_BRACKET_C;
    {P_EQUAL}           => QUEX_TKN_OP_EQUAL;
    {P_KEY_AND}         => QUEX_TKN_AND;
    {P_PRINT}           => QUEX_TKN_PRINT;
    {P_KEY_OR}          => QUEX_TKN_OR;
    {P_COLON}           => QUEX_TKN_COLON;
    {P_KEY_IN}          => QUEX_TKN_IN;

    {P_KEY_STRUCT} {
        self_send(QUEX_TKN_STRUCT);
        self.allow_opening_indentation_f = true;
        RETURN;
    }

    {P_KEY_IF} {
        self_send(QUEX_TKN_IF);
        self.allow_opening_indentation_f = true;
        RETURN;
    }
    {P_KEY_ELSE} {
        self_send(QUEX_TKN_ELSE);
        self.allow_opening_indentation_f = true;
        RETURN;
    }
    {P_KEY_FOR} {
        self_send(QUEX_TKN_FOR);
        self.allow_opening_indentation_f = true;
        RETURN;
    }
    {P_KEY_DEF} {
        self_send(QUEX_TKN_FUNCTION_DEF);
        self.allow_opening_indentation_f = true;
        RETURN;
    }
    {P_IDENTIFIER} {
        self_token_take_text(Lexeme, LexemeEnd);
        self_send(QUEX_TKN_IDENTIFIER);
    }
    {P_NUMBER} => QUEX_TKN_NUMBER(number=atoi((const char*)Lexeme));

    {P_STRING_DELIMITER} {
        self_enter_mode(&STRING_READER); 
        self_send(QUEX_TKN_EVENT_MODE_CHANGE);
        return;
    }
}

mode STRING_READER :
     END_OF_FILE
<entry: PROGRAM>
<exit:  PROGRAM>
{
    on_entry {
        self_accumulator_clear();
    }

    on_exit {
        self_accumulator_flush(QUEX_TKN_STRING);
    }

    {P_BACKSLASHED_STRING_DELIMITER} {
        self_accumulator_add(Lexeme, LexemeEnd);
    }

    {P_BACKSLASHED_BACKSLASH} {
        self_accumulator_add(Lexeme, LexemeEnd);
    }

    {P_STRING_DELIMITER} {
        self_enter_mode(&PROGRAM);
        self_send(QUEX_TKN_EVENT_MODE_CHANGE);
        return;
    }

    . {
        self_accumulator_add(Lexeme, LexemeEnd);
    }
}
